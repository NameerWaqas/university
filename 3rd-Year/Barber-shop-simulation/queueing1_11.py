# -*- coding: utf-8 -*-
"""Queueing1.11

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kDNMiB2fzihDlJJDSeLO4fDdhC5E3hQ2

# Single Server Quying System
## Problem 1.10

### Overall Project Architecture

> ### Coding Paradigm
>- [ ] OOP
- [x] Functional
- [ ] Scripting

> ### Unit of time
>- [X] Minutes

> ### State of the server will be validated using boolean values

> ### Randomness will be achieved using psedou random generator first and will be proceeded by adding the last generated randomnunmber to the curently generated number.

> ### Values to be noted
>- [x] Arrival Time = $t_{i}$ 
- [x] Inter arrival time = $A_{i}$ = $t_{i} - t_{i-1}$
- [x] Waiting in queue = $W_{i}$ = 
- [x] Service time = $S_{i}$ = 
- [x] Completion(Departure) Time =  $D_{i}$ = 

### For the main code and 1.7 we'll not terminate the simulation until queue overflows or all customers has been served.

### All Imports
"""

import random
from time import sleep

"""### Generating Arrival and Service Time, $t_{i}$ , $S_{i}$ """

def generateArrivalAndServiceTime():
    global arrivalTime,serviceTime
    i = 0
    # for i in range(0,10): part of original code
    while True:
        if i : 
            arrivalTimeTemp = random.randint(600,1800) + arrivalTime[i-1]
            if arrivalTimeTemp >28800:
                break
        else: 
            arrivalTimeTemp = random.randint(600,1800)
        # serviceTimeTemp = random.randint(6,10) part of original code
        serviceTimeTemp = random.randint(1801,2200)

        arrivalTime.append(arrivalTimeTemp)
        serviceTime.append(serviceTimeTemp)
        i+=1

"""### Calculating Inter Arrival Time $A_{i}$"""

def calculateInterArrivalTime():
    global arrivalTime
    for i in range(len(arrivalTime)):
        if i:
            temp = arrivalTime[i] - arrivalTime[i-1] 
        else:
            temp = arrivalTime[i]
        # print("Inter Arrival time for " +str(i+1) +" event: " + str(temp))

"""### Calculating Waiting Time"""

def calculateWaitingTime(i):
    # global queue
    global waitingTime,serverIsBusy,completionTime,arrivalTime

    if serverIsBusy:
        waitingTime.append(completionTime[i-1]-arrivalTime[i])
        
    else:
        waitingTime.append(0)
        serverIsBusy=True

"""### Calculating Completion Time"""

def calculateCompletionTime(i):
    global completionTime,waitingTime,arrivalTime

    completionTime.append(arrivalTime[i]+serviceTime[i]+waitingTime[i])
    # printEventDetails(i)
    # print(str(completionTime[i])+" , completion time\n")

"""## Print Details"""

def printEventDetails(i):
    global arrivalTime,serviceTime,waitingTime,completionTime
    print("\nArrival Time:" + str(arrivalTime[i]) +"\n Service Time: " + str(serviceTime[i]) +"\n Waiting Time:" +str(waitingTime[i])+"\nCompletion time: " +str(completionTime[i]))

"""## Calculations"""

def Calculations():
    global serverIsBusy,arrivalTime,serviceTime,waitingTime,completionTime
    generateArrivalAndServiceTime()
    
    calculateInterArrivalTime()
    for i in range(len(arrivalTime)):
        calculateWaitingTime(i)
        calculateCompletionTime(i)
    serverIsBusy=False

"""# Simulation"""

def simulateSingleServerQueuingSystem():

    global completionTime,arrivalTime,clock,queue,event,serverIsBusy,custInQueue,timeAvgNumInSys,avgTtlTimeInSys
    global maxQueueLen, waitingTime
    balkCust=0
    currentArrival=0
    inServer = 1
    print("Clock \t Event \t Status \t i \t ti \t Ci \tQPopulation \t\t State")
    print(str(0)+" \t "+str(0)+" \t "+"Start"+" \t\t "+"--"+" \t "+"--"+"\t"+"--"+" \t "+str(0)+" \t\t\t "+"Idle")

    # while clock is not 60 and queue <= 10: part of original code
    # while queue <= 10: part of original code
    while True:

        sleep(0.001) # Change the value later on

        if maxQueueLen<queue: maxQueueLen=queue

        if clock in completionTime:
            custInQueue+=queue # calculating summation of customers in queue.
            event+=1
            if queue ==0:
                serverIsBusy = False
                generateReport("completion",inServer-1)  
                break

            else:
                queue-=1
                generateReport("completion",inServer-1)  
                inServer +=1

        if clock in arrivalTime:
            custInQueue+=queue # calculating summation of customers in queue.
            event+=1
            currentArrival+=1
            if serverIsBusy == False:
                serverIsBusy=True
            else:
                if queue < 2:
                    queue+=1
                else:
                    balkCust+=1
                    print(str(clock)+" \t balk")
                    clock+=1
                    continue

            generateReport("arrival",currentArrival-1)
        
        # if clock in completionTime:
        #     custInQueue+=queue # calculating summation of customers in queue.
        #     event+=1
        #     if queue ==0:
        #         serverIsBusy = False
        #         generateReport("completion",inServer-1)  
        #         break

        #     else:
        #         queue-=1
        #         generateReport("completion",inServer-1)  
        #         inServer +=1

        clock+=1
    print("\nSimulation End") if queue != 11 else print("Error: Queue is full") 

    calculationsFor1Dot7(custInQueue,event,completionTime,arrivalTime,maxQueueLen,waitingTime)
    print("Number of balking customers: "+str(balkCust))

"""# Calculations For 1.7"""

def calculationsFor1Dot7(custInQueue,event,completionTime,arrivalTime,maxQueueLen,waitingTime):
    timeAvgNumInSys = (custInQueue+(event-1))/event#                            part a 1.7             
    avgTtlTimeInSys = (sum(completionTime)-sum(arrivalTime))/len(arrivalTime)#  part b 1.7
    print("a) The Time-Average number in the sysytem: "+str(timeAvgNumInSys))
    print("b) The Average total time in the system: "+str(avgTtlTimeInSys))
    print("c) The Max queue length : "+str(maxQueueLen))#                       part c 1.7                        
    print("d) The Max delay in queue: "+str(max(waitingTime)))#                 part d 1.7
    #********** calculation for                                                 part e 1.7
    tmpLstHldngDiffOfCmpNdArvlTm = []
    for i in range(len(arrivalTime)):
        tmpLstHldngDiffOfCmpNdArvlTm.append(completionTime[i]-arrivalTime[i])
    print("e) The Max time in the system: "+str(max(tmpLstHldngDiffOfCmpNdArvlTm)))
    #**********                                                            end  part e 1.7
    #********** calculation for 
    countForExWaiters=0#                                                         part f 1.7
    for waiter in waitingTime:
        if waiter>60:
            countForExWaiters+=1
    print("f) The proportion of customers having a delay in queue in excess of 1 minute: "+str(countForExWaiters)+" : "+str(len(arrivalTime)))
    #********** calculation for                                              end    part f 1.7

"""# Report Generation"""

def generateReport(status,i):
    global event,clock,arrivalTime,completionTime,queue,serverIsBusy
    if status=="arrival":
        print(str(clock)+" \t "+str(event)+" \t "+str(status)+" \t "+str(i+1)+" \t "+str(arrivalTime[i])+"\t"+"--"+" \t "+str(queue)+" \t\t\t "+str("Busy" if serverIsBusy else "Idle"))

    else:
        print(str(clock)+" \t "+str(event)+" \t "+str(status)+" \t "+str(i+1)+" \t "+"--\t"+str(completionTime[i])+" \t "+str(queue)+" \t\t\t "+str("Busy" if serverIsBusy else "Idle"))

    # Clock Event Status i ti Ci QueuePopulation state

    pass

"""## Main Execution"""

if __name__ == "__main__":
    arrivalTime=[]                  #
    serviceTime=[]                  #
    serverIsBusy = False            #   GLOBAL VARIABLES
    waitingTime=[]                  #
    completionTime=[]               #
    Calculations()

    clock = 0
    queue = 0 #count of waiting entities
    event = 0

    custInQueue = 0 # ,                                                         part a                                      
    timeAvgNumInSys = 0 # (custInQueue + event -1)/event                        part a
    avgTtlTimeInSys = 0 #  sum(Ci-Ti)/num                                       part b
    maxQueueLen = 0#                                                            part c
    


    simulateSingleServerQueuingSystem()

    # ====================== Simulation End ====================

